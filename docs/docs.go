// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/signup": {
            "post": {
                "description": "Registering a new user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authorization"
                ],
                "summary": "Registering a new user",
                "parameters": [
                    {
                        "description": "Account information for signup",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Information about the user's account after successful registration",
                        "schema": {
                            "$ref": "#/definitions/dtos.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad json in request",
                        "schema": {
                            "$ref": "#/definitions/v1.validationErrorResponse"
                        }
                    },
                    "409": {
                        "description": "A user already exists",
                        "schema": {
                            "$ref": "#/definitions/v1.validationDTOErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/v1.internalServerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dtos.CreateUserRequest": {
            "description": "User account information for registration",
            "type": "object",
            "required": [
                "email",
                "lastname",
                "name",
                "nickname",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@email.com"
                },
                "lastname": {
                    "type": "string",
                    "example": "Doe"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "nickname": {
                    "type": "string",
                    "example": "Johny1"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "mySuperPass"
                },
                "phone": {
                    "type": "integer",
                    "example": 79990001122
                }
            }
        },
        "dtos.CreateUserResponse": {
            "description": "Information about the user's account after successful registration",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string",
                    "example": "2006-01-02T03:04:05.5141511+03:00"
                },
                "user_type": {
                    "type": "string",
                    "example": "USER"
                },
                "uuid": {
                    "type": "string",
                    "example": "16763be4-6022-406e-a950-fcd5018633ca"
                }
            }
        },
        "v1.internalServerErrorResponse": {
            "description": "Internal server error",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Internal server error"
                }
            }
        },
        "v1.validationDTOErrorResponse": {
            "description": "Uniqueness error",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "A user with the nickname Johny1 already exists"
                }
            }
        },
        "v1.validationErrorResponse": {
            "description": "JSON validate error",
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Bad json in request"
                },
                "fields": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "email:required"
                    ]
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "IstokAuth",
	Description:      "Auth service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
